// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-

/*
  * Copyright (C)2015  Department of Robotics Brain and Cognitive Sciences - Istituto Italiano di Tecnologia
  * Author:Francesco Rea
  * email: francesco.rea@iit.it
  * Permission is granted to copy, distribute, and/or modify this program
  * under the terms of the GNU General Public License, version 2 or any
  * later version published by the Free Software Foundation.
  *
  * A copy of the license can be found at
  * http://www.robotcub.org/icub/license/gpl.txt
  *
  * This program is distributed in the hope that it will be useful, but
  * WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
  * Public License for more details
*/

/**
 * @file gazetrackRatethread.h
 * @brief Definition of a thread that receives input images and determines the counterpart`s gazing
 */


#ifndef _GAZE_TRACK_RATETHREAD_H_
#define _GAZE_TRACK_RATETHREAD_H_

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/dev/all.h>
#include <yarp/os/Thread.h>
#include <yarp/os/Log.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include <opencv2/opencv.hpp>
#include <cstring>

#include <dlib/image_processing/frontal_face_detector.h>
#include <dlib/image_processing/render_face_detections.h>
#include <dlib/image_processing.h>
#include <dlib/gui_widgets.h>
#include <dlib/image_io.h>
#include <dlib/opencv.h>

// ***** countFps class ***********

class CountFps
{
public:
    CountFps();
    ~CountFps();
    void Init();
    char* getFps();
    void showFps(cv::Mat frame);
private:
    double FPS;
    double FPS_sum;
    int FPS_count;
    long prevTick;
    int count;
    char str[256];
    std::string stri;
};

// ***** eyeTracker class ***********

class eyeTracker
{
public:
    eyeTracker();
    ~eyeTracker();
    int Init();
    void loadShapePredictor(std::string inval);
    void getFrontalFaceDetector();
    void findFaceDlib(dlib::cv_image<dlib::bgr_pixel> frame);
    std::vector<dlib::full_object_detection> findFaceFeatures(dlib::cv_image<dlib::bgr_pixel> frame);
	void drawEyeBoxes(cv::Mat& image, double &a, double &b, double &angle);
private:
	double headAzim_, headElev_;
    dlib::shape_predictor sp_;
    dlib::frontal_face_detector detector_;
    std::vector<dlib::rectangle> dets_;

	int eyeLeftXmin, eyeLeftXmax, eyeRightXmin, eyeRightXmax;
	int eyeLeftYmin, eyeLeftYmax, eyeRightYmin, eyeRightYmax;
	int noseTopX_, noseTopY_, noseBotX_, noseBotY_;
	double noseAngle_;
	double sumleft_, sumright_, sumcount_;
	cv::Point eyeLeftCornerOut_, eyeLeftCornerIn_, eyeRightCornerOut_, eyeRightCornerIn_;
	std::vector<cv::Point> leftEyePoints;
	std::vector<cv::Point> rightEyePoints;
	cv::Point getBetterCentroid(cv::Mat image);
	cv::Point getCentroid(cv::Mat image);
};

// ***** gazeTrackRatethread class ***********

class gazeTrackRatethread : public yarp::os::Thread {
private:
    bool result;                    //result of the processing

    std::string robot;              // name of the robot
    std::string configFile;         // name of the configFile where the parameter of the camera are set
    std::string inputPortName;      // name of input port for incoming events, typically from aexGrabber

    yarp::sig::ImageOf<yarp::sig::PixelRgb>* tmpImage;                              // tmpImage generated by the processing
    yarp::sig::ImageOf<yarp::sig::PixelRgb>* inputImage;                            // input image from the inputPort
    yarp::sig::ImageOf<yarp::sig::PixelBgr>* outputImage;                           // output image

    yarp::os::BufferedPort<yarp::sig::ImageOf<yarp::sig::PixelRgb> > inputPort;
    yarp::os::BufferedPort<yarp::sig::ImageOf<yarp::sig::PixelBgr> > outputPort;     // output port to plot event
    yarp::os::BufferedPort<yarp::sig::Vector> inputPortClm;     
    std::string name;                                                                // rootname of all the ports opened by this thread
    CountFps cFps;
    eyeTracker *et;
    dlib::image_window win;
public:
    /**
    * constructor default
    */
    gazeTrackRatethread();

    /**
    * constructor 
    * @param robotname name of the robot
    */
    gazeTrackRatethread(std::string robotname,std::string configFile);

    /**
     * destructor
     */
    ~gazeTrackRatethread();

    /**
    *  initialises the thread
    */
    bool threadInit();

    /**
    *  correctly releases the thread
    */
    void threadRelease();

    /**
    *  active part of the thread
    */
    void run(); 

    /**
    * function that sets the rootname of all the ports that are going to be created by the thread
    * @param str rootnma
    */
    void setName(std::string str);
    
    /**
    * function that returns the original root name and appends another string iff passed as parameter
    * @param p pointer to the string that has to be added
    * @return rootname 
    */
    std::string getName(const char* p);

    /**
    * function that sets the inputPort name
    */
    void setInputPortName(std::string inpPrtName);

    /**
     * function in charge of correctly closing the thread
     */
    void onStop();

    /**
     * method for the processing in the ratethread
     **/
    bool processing();
};

#endif  //_TUTORIAL_THREAD_H_






//----- end-of-file --- ( next line intentionally left blank ) ------------------

